<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaijia.blog.mapper.BlogCommentMapper">
    
    <resultMap type="BlogComment" id="BlogCommentResult">
        <result property="id"    column="id"    />
        <result property="articleId"    column="article_id"    />
        <result property="userId"    column="user_id"    />
        <result property="content"    column="content"    />
        <result property="parentId"    column="parent_id"    />
        <result property="createTime"    column="create_time"    />
    </resultMap>

    <resultMap id="VCommentResult" type="VComment" extends="BlogCommentResult">
        <result property="userName" column="user_name" />
        <result property="articleTitle" column="article_title" />
    </resultMap>

    <sql id="selectBlogComment">
        select id, article_id, user_id, content, parent_id, create_time from blog_comment
    </sql>

    <sql id="selectVComment">
        select a.id, a.article_id, a.user_id, a.content, a.parent_id, a.create_time, b.user_name, c.title article_title from blog_comment as a
            left join sys_user as b on a.user_id = b.user_id
            left join blog_article as c on a.article_id = c.id
    </sql>

    <select id="selectComment4Article" parameterType="VComment" resultMap="VCommentResult">
        <include refid="selectVComment"/>
        <where>
            <if test="articleId != null"> and article_id = #{articleId}</if>
        </where>
    </select>

    <select id="selectBlogCommentList" parameterType="VComment" resultMap="VCommentResult">
        <include refid="selectVComment"/>
        <where>
            <if test="articleId != null "> and a.article_id = #{articleId}</if>
            <if test="articleTitle != null and articleTitle != ''"> and c.title like concat('%',#{articleTitle},'%')</if>
            <if test="userId != null "> and a.user_id = #{userId}</if>
            <if test="userName != null and userName != ''"> and b.user_name like concat('%',#{userName},'%')</if>
            <if test="content != null  and content != ''"> and a.content like concat('%',#{content},'%')</if>
            <if test="parentId != null "> and a.parent_id = #{parentId}</if>
            <if test="createTime != null "> and a.create_time = #{createTime}</if>
        </where>
    </select>
    
    <select id="selectBlogCommentById" parameterType="Long" resultMap="BlogCommentResult">
        <include refid="selectBlogComment"/>
        where id = #{id}
    </select>

    <insert id="insertBlogComment" parameterType="BlogComment" useGeneratedKeys="true" keyProperty="id">
        insert into blog_comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="articleId != null">article_id,</if>
            <if test="userId != null">user_id,</if>
            <if test="content != null and content != ''">content,</if>
            <if test="parentId != null">parent_id,</if>
            <if test="createTime != null">create_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="articleId != null">#{articleId},</if>
            <if test="userId != null">#{userId},</if>
            <if test="content != null and content != ''">#{content},</if>
            <if test="parentId != null">#{parentId},</if>
            <if test="createTime != null">#{createTime},</if>
         </trim>
    </insert>

    <update id="updateBlogComment" parameterType="BlogComment">
        update blog_comment
        <trim prefix="SET" suffixOverrides=",">
            <if test="articleId != null">article_id = #{articleId},</if>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="content != null and content != ''">content = #{content},</if>
            <if test="parentId != null">parent_id = #{parentId},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteBlogCommentById" parameterType="Long">
        delete from blog_comment where id = #{id}
    </delete>

    <delete id="deleteBlogCommentByIds" parameterType="String">
        delete from blog_comment where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>